{
    "collab_server" : "",
    "contents" : "#' Get AHREF rank\n#'\n#' Depreciated: will be removed soon\n#'\n#' @param url URL we want the rank for\n#' @param api_key API key (also called token)\n#'\n#' @return A single number\n#' @export\n#'\n#' @examples\\dontrun{\n#' get_rank('google.com', ahrefs_key)\n#' }\nget_rank <- function(url, api_key){\n  parameters <- list(\n    token  = api_key,\n    target = url,\n    mode   = 'exact',\n    output = 'json',\n    from   = 'ahrefs_rank')\n\n  response <- httr::GET('http://apiv2.ahrefs.com', query = parameters)\n\n  if (httr::http_type(response) != \"application/json\") {\n    stop(\"API did not return json\", call. = FALSE)\n  }\n\n  httr::stop_for_status(response)\n\n  content <- httr::content(response, type = 'text', encoding = 'utf-8')\n  parsed  <- jsonlite::fromJSON(content, simplifyVector = FALSE)\n\n  return(parsed$pages[[1]]$ahrefs_rank)\n}\n\n\n#' Get Domain Rating\n#'\n#' Depreciated: will be removed soon\n#'\n#' @param url URL we want the rank for\n#' @param api_key API key (also called token)\n#'\n#' @return A single number\n#' @export\n#'\n#' @examples\\dontrun{\n#' get_domain_rating('google.com', ahrefs_key)\n#' }\nget_domain_rating <- function(url, api_key){\n\n  parameters <- list(\n    token  = api_key,\n    target = url,\n    mode   = 'domain',\n    output = 'json',\n    from   = 'domain_rating')\n\n  response <- httr::GET('http://apiv2.ahrefs.com', query = parameters)\n\n  if (httr::http_type(response) != \"application/json\") {\n    stop(\"API did not return json\", call. = FALSE)\n  }\n\n  httr::stop_for_status(response)\n\n  content <- httr::content(response, type = 'text', encoding = 'utf-8')\n  parsed  <- jsonlite::fromJSON(content, simplifyVector = FALSE)\n\n  return(parsed$domain$domain_rating)\n}\n\n#' Get Refering Domains\n#'\n#' Depreciated: will be removed soon\n#'\n#' @param url URL we want the domains for\n#' @param api_key API key (also called token)\n#'\n#' @return A list: first element has info on the refering domains, second on overall statistics\n#' @export\n#'\n#' @examples\\dontrun{\n#' get_refering_domains('google.com', ahrefs_key)\n#'}\nget_refering_domains <- function(url, api_key, limit = 10){\n\n  parameters <- list(\n    token  = api_key,\n    target = url,\n    mode   = 'domain',\n    output = 'json',\n    from   = 'refdomains',\n    limit  = limit)\n\n  response <- httr::GET('http://apiv2.ahrefs.com', query = parameters)\n\n  if (httr::http_type(response) != \"application/json\") {\n    stop(\"API did not return json\", call. = FALSE)\n  }\n\n  httr::stop_for_status(response)\n\n  content <- httr::content(response, type = 'text', encoding = 'utf-8')\n  parsed  <- jsonlite::fromJSON(content, simplifyVector = FALSE)\n\n  return(parsed)\n}\n\nlibrary(httr)\n\n#' Get URL metrics\n#'\n#' Depreciated: will be removed soon\n#'\n#' @param url URL we metrics for\n#' @param api_key API key (also called token)\n#'\n#' @return A list\n#' @export\n#'\n#' @examples\\dontrun{\n#' get_metrics('google.com', ahrefs_key)\n#'}\nget_metrics <- function(url, api_key){\n\n  parameters <- list(\n    token =  api_key,\n    target = url,\n    limit = 1000,\n    output = 'json',\n    from = 'metrics_extended',\n    mode = 'prefix')\n\n  get_url = 'http://apiv2.ahrefs.com/'\n\n  response <- httr::GET(get_url, query = parameters)\n\n  if (httr::http_type(response) != \"application/json\") {\n    stop(\"API did not return json\", call. = FALSE)\n  }\n\n  httr::stop_for_status(response)\n\n  content <- httr::content(response, type = 'text', encoding = 'utf-8')\n  parsed  <- jsonlite::fromJSON(content, simplifyVector = FALSE)\n\n  return(parsed)\n}\n",
    "created" : 1470663822588.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "803016452",
    "id" : "E12333C2",
    "lastKnownWriteTime" : 1479042821,
    "last_content_update" : 1479042821,
    "path" : "~/Documents/APIs/ahrefs/R/functions.R",
    "project_path" : "R/functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}