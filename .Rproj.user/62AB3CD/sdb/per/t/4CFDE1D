{
    "collab_server" : "",
    "contents" : "#' Get Data From the AHREF's\n#'\n#'Get data from the AHREF's API.\n#'For more information see the online documentation: https://ahrefs.com/api/documentation.\n#'\n#' @param target Aim of a request: a domain, a directory or a URL\n#' @param token Authentication token\n#' @param from Table to select data from\n#' @param mode Mode of operation: exact, domain, subdomains or prefix\n#' @param select A character vector of columns to select in 'from' table.\n#' @param where \"Where\" condition to satisfy. Use helper function 'make_condition' or see documentation for how to build where conditions manually. Where filters before grouping.\n#' @param having \"Having\" condition to satisfy. Use helper function 'make_condition' or see documentation for how to build where conditions manually. Having filters after grouping.\n#' @param order_by List of columns to sort on. Use helper function 'make_order' or see documentation for how to build orders by hand.\n#' @param offset Position from which to start returning data\n#' @param limit Number of results to return\n#'\n#' @return An object of class 'ahrefs_api'\n#' @export\n#'\n#' @examples \\dontrun{\n#' ahrefs_key <- '123456789'\n#' url <- 'ahrefs.com/api/documentation/'\n#' get_ahrefs_data(url, ahrefs_key, from = 'ahrefs_rank', mode = 'domain')\n#' get_ahrefs_data(url, ahrefs_key, from = 'metrics_extended', mode = 'exact')\n#' get_ahrefs_data(url, ahrefs_key, from = 'refdomains', mode = 'prefix', limit = 10)\n#'\n#' get_ahrefs_data(url, ahrefs_key,\n#'    mode = 'exact',\n#'    from = 'refdomains',\n#'    having = make_condition('domain_rating', '>', 30),\n#'    order  = make_order('domain_rating', 'desc'),\n#'    limit = 10)\n#' }\nget_ahrefs_data <- function(target,\n                            token,\n                            from,\n                            mode,\n                            select   = NULL,\n                            where    = NULL,\n                            having   = NULL,\n                            order_by = NULL,\n                            offset   = 0,\n                            limit    = 1000){\n\n  mode_values <- c('exact', 'domain', 'subdomains', 'prefix')\n\n  # Check parameters\n  if (!(from %in% from_values)) stop(\"Invalid table chosen for 'from' parameter.\")\n  if (!(mode %in% mode_values)) stop('Invalid mode.')\n  if (offset %% 1 != 0) stop('Offset must be an integer')\n  if (limit  %% 1 != 0) stop('Limit must be an integer')\n\n  # Change select to format wanted by API\n  if (!is.null(select)) select <- paste0(select, collapse = ',')\n\n  parameters <- list(\n    target    = target,\n    token     = token,\n    from      = from,\n    mode      = mode,\n    select    = select,\n    where     = where,\n    having    = having,\n    order_by  = order_by,\n    offset    = offset,\n    limit     = limit,\n    output    = 'json'\n  )\n\n  # Remove null parameters\n  parameters <- Filter(function(x) !is.null(x), parameters)\n\n  # Set user agent\n  ua <- httr::user_agent(\"http://github.com/mhairi/ahrefs\")\n\n  # Make Request\n  url <- httr::modify_url('http://apiv2.ahrefs.com', query = parameters)\n\n  response <- httr::GET(url, ua)\n\n  # Check for errors\n  httr::stop_for_status(response)\n\n  # Parse content\n  content <- httr::content(response, 'text', encoding = 'utf-8')\n  parsed  <- jsonlite::fromJSON(content, simplifyVector = FALSE)\n\n  # More error checking\n  if (!is.null(parsed$error)) stop('API returned error: ', parsed$error)\n\n  return(structure(\n    list(\n      content = parsed,\n      response = response,\n      parameters = parameters\n    ),\n    class = 'ahrefs_api'\n  ))\n\n}\n",
    "created" : 1479039414811.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2828556227",
    "id" : "4CFDE1D",
    "lastKnownWriteTime" : 1479130294,
    "last_content_update" : 1479130294522,
    "path" : "~/Documents/APIs/ahrefs/R/general_function.R",
    "project_path" : "R/general_function.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}